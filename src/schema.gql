# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type User {
  id: String!
  userName: String!
  fullName: String!
  email: String!
  dateOfBirth: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthResponseOutput {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type LogoutResponseOutput {
  loggedOut: Boolean!
}

type NewTokenResponseOutput {
  accessToken: String!
  refreshToken: String!
}

type PostResponseOutput {
  id: String!
  title: String!
  content: String!
  picture: String!
  authorId: String!
  author: User!
}

type PostsResponseOutput {
  """Total Count of results"""
  totalCount: Float!

  """Total Pages of results"""
  totalPages: Float!

  """Current page number starting 0"""
  currentPage: Float!

  """boolean flag to indicate if more pages exists"""
  nextPage: Boolean!

  """Array of posts output"""
  posts: [PostResponseOutput!]!
}

type UserResponseOutput {
  id: String!
  userName: String!
  fullName: String!
  email: String!
  dateOfBirth: DateTime!
  profilePictureUrl: String!
}

type UsersResponseOutput {
  """Total Count of results"""
  totalCount: Float!

  """Total Pages of results"""
  totalPages: Float!

  """Current page number starting 0"""
  currentPage: Float!

  """boolean flag to indicate if more pages exists"""
  nextPage: Boolean!

  """Array of users output"""
  users: [UserResponseOutput!]!
}

type Query {
  """Fetch list of posts"""
  posts(
    """Pagination input"""
    paginationArgs: PaginationArgs!

    """search input"""
    searchBy: PostSearchByInput
  ): PostsResponseOutput!

  """Fetch a post"""
  post(id: String!): PostResponseOutput!

  """Fetch list of posts by author"""
  fetchPostsByAuthor(
    """Pagination input"""
    paginationArgs: PaginationArgs!

    """search input"""
    searchBy: PostSearchByInput
  ): PostsResponseOutput!

  """Fetch all users"""
  fetchUsers(
    """Pagination input"""
    paginationArgs: PaginationArgs!

    """search input"""
    searchBy: UserSearchByInput
  ): UsersResponseOutput!

  """Get logged in user details"""
  userMe: UserResponseOutput!
}

input PaginationArgs {
  limit: Int! = 20
  offset: Int! = 0
}

input PostSearchByInput {
  searchTerm: String
}

input UserSearchByInput {
  searchTerm: String
}

type Mutation {
  """SignUp a user"""
  signUp(input: SignUpInput!): AuthResponseOutput!

  """Sign in a user"""
  signIn(input: SignInInput!): AuthResponseOutput!

  """Log out a user"""
  logOut(id: String!): LogoutResponseOutput!

  """Get new token for a user when accessToken expires"""
  getNewTokens: NewTokenResponseOutput!

  """Create a post"""
  createPost(input: CreatePostInput!, file: Upload): PostResponseOutput!

  """Update a post"""
  updatePost(input: UpdatePostInput!, file: Upload): PostResponseOutput!

  """Delete a post"""
  deletePost(id: String!): PostResponseOutput!

  """Change user password"""
  changePassword(input: UserChangePasswordInput!): UserResponseOutput!

  """Single upload for user"""
  singleUpload(file: Upload): UserResponseOutput!

  """Update user info"""
  updateUserInfo(input: UpdateUserInput!): UserResponseOutput!
}

input SignUpInput {
  userName: String!
  fullName: String!
  email: String!
  password: String!
  dateOfBirth: DateTime!
}

input SignInInput {
  usernameOrEmail: String!
  password: String!
}

input CreatePostInput {
  title: String!
  content: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdatePostInput {
  title: String
  content: String
  id: String!
}

input UserChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input UpdateUserInput {
  userName: String
  fullName: String
}

scalar link__Import